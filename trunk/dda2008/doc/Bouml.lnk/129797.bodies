class ArticuloCompuesto
!!!131845.java!!!	ArticuloCompuesto(in nombre : String, inout unaMedida : Medida)

    super(nombre, unaMedida);
!!!131973.java!!!	ArticuloCompuesto(in nombre : String, inout unaMedida : Medida, in cantidad : int, in costo : double)

    super(nombre, unaMedida, cantidad, costo);
!!!132101.java!!!	agregarComponente(inout unComponente : Componente) : boolean

    try {
      // No puedo agregar un componente a si mismo
      if (unComponente.getArticulo().equals(this)) {
        return false;
      }
      if (unComponente.getArticulo().esCompuesto()) {
        if (!Fachada.verificarRedundanciaArticulosCompuestos(this, unComponente))
            return false;
      }
      int pos = getPosComponente(unComponente);
      if (pos!=-1) {
         unComponente = componentes.get(pos);
         int cantidad = unComponente.getCantidad();
         unComponente.setCantidad(++cantidad);
         recalcularStock();
         recalcularCosto();
      }
      else {
        this.componentes.add(unComponente);  
      }
      return true;
      
    } catch (Exception e) {
      return false;
    }
!!!132229.java!!!	tipoArticulo() : String

    return "Compuesto";
!!!132357.java!!!	eliminarComponente(inout unComponente : Componente) : boolean

    try {
      int pos = getPosComponente(unComponente);
      if (pos!=-1) {
         unComponente = componentes.get(pos);
         int cantidad = unComponente.getCantidad();
         if (cantidad==1) {
           if (componentes.size()>1)
             componentes.remove(pos);
           else
             return false;
         }
         else {
           unComponente.setCantidad(--cantidad);
         }
         recalcularStock();
         recalcularCosto();
         return true;
      }
      else {
        // No existe el componente
        return false;  
      }
    } catch (Exception e) {
      return false;
    }
!!!132485.java!!!	listarComponentes() : Componente

    return this.componentes;
!!!132613.java!!!	esHoja() : boolean

    return false;
!!!132741.java!!!	contarComponentes() : int

    return componentes.size();
!!!132869.java!!!	getHijo(in posicion : int) : Object

    return componentes.get(posicion);
!!!132997.java!!!	getPosComponente(inout unComponente : Componente) : int

    return componentes.indexOf(unComponente);
!!!133125.java!!!	esCompuesto() : boolean

    return true;
!!!133253.java!!!	recalcularStock() : boolean

    int cantidadMax = 99999;
    for (Componente unComponente : this.listarComponentes()) {
      if (unComponente.getArticulo().esCompuesto()) {
        ((ArticuloCompuesto) unComponente.getArticulo()).recalcularStock();
      }
      int temp = unComponente.getArticulo().getCantidad() / unComponente.getCantidad();
      if (cantidadMax > temp) {
        cantidadMax = temp;
      }
    }
    this.setCantidad(cantidadMax);
    return true;
!!!133381.java!!!	recalcularCosto() : boolean

    double costo = 0;
    for (Componente unComponente : this.listarComponentes()) {
      if (unComponente.getArticulo().esCompuesto()) {
        ((ArticuloCompuesto) unComponente.getArticulo()).recalcularCosto();
      }
      double temp = unComponente.getArticulo().getCosto() * unComponente.getCantidad();
      costo += temp;
    }
    this.setCosto(costo);
    return true;
!!!133509.java!!!	getPadre(inout hijo : Componente) : Articulo

		if(componentes.contains(hijo)){
		return this;
		}
		Articulo padre=null;
		for(int x=0;x<componentes.size()&& padre==null;x++){
			Componente unHijo=(Componente)componentes.get(x);
			padre=unHijo.getArticulo().getPadre(hijo);
		}
		return padre;
!!!133637.java!!!	remplazarComponentes(inout listaComponetes : ArrayList<Componente>) : boolean

    if (listaComponetes.size()>0) {
      componentes.clear();
      for (Componente unComponente : listaComponetes) {
        agregarComponente(unComponente);
      }
      return true;      
    }
    else {
      return false;
    }
!!!133765.java!!!	agregarComponenteCantidad(inout unComponente : Componente) : boolean

    try {
      // No puedo agregar un componente a si mismo
      if (unComponente.getArticulo().equals(this)) {
        return false;
      }
      if (unComponente.getArticulo().esCompuesto()) {
        if (!Fachada.verificarRedundanciaArticulosCompuestos(this, unComponente))
            return false;
      }
      int pos = getPosComponente(unComponente);
      if (pos!=-1) {
        if (unComponente.getCantidad()>0) {
          setCantidad(unComponente.getCantidad());
          recalcularStock();
          recalcularCosto();
        }
        else {
          return false;
        }
      }
      else {
        this.componentes.add(unComponente);  
      }
      return true;
      
    } catch (Exception e) {
      return false;
    }    
    
