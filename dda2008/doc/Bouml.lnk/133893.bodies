class MultiLineLabelUI
!!!171909.java!!!	layoutCL(inout label : JLabel, inout fontMetrics : FontMetrics, in text : String, inout icon : Icon, inout viewR : Rectangle, inout iconR : Rectangle, inout textR : Rectangle) : String

        String s = layoutCompoundLabel(
            (JComponent) label,
            fontMetrics,
            splitStringByLines(text),
            icon,
            label.getVerticalAlignment(),
            label.getHorizontalAlignment(),
            label.getVerticalTextPosition(),
            label.getHorizontalTextPosition(),
            viewR,
            iconR,
            textR,
            label.getIconTextGap());
      
      if( s.equals("") )
        return text;
      return s;
!!!172037.java!!!	layoutCompoundLabel(inout c : JComponent, inout fm : FontMetrics, in text : String, inout icon : Icon, in verticalAlignment : int, in horizontalAlignment : int, in verticalTextPosition : int, in horizontalTextPosition : int, inout viewR : Rectangle, inout iconR : Rectangle, inout textR : Rectangle, in textIconGap : int) : String

        boolean orientationIsLeftToRight = true;
        int     hAlign = horizontalAlignment;
        int     hTextPos = horizontalTextPosition;

        
        if (c != null) {
            if (!(c.getComponentOrientation().isLeftToRight())) {
                orientationIsLeftToRight = false;
            }
        }
        

        // Translate LEADING/TRAILING values in horizontalAlignment
        // to LEFT/RIGHT values depending on the components orientation
        switch (horizontalAlignment) {
        case LEADING: 
            hAlign = (orientationIsLeftToRight) ? LEFT : RIGHT;
            break;
        case TRAILING: 
            hAlign = (orientationIsLeftToRight) ? RIGHT : LEFT;
            break;
        }

        // Translate LEADING/TRAILING values in horizontalTextPosition
        // to LEFT/RIGHT values depending on the components orientation
        switch (horizontalTextPosition) {
        case LEADING: 
            hTextPos = (orientationIsLeftToRight) ? LEFT : RIGHT;
            break;
        case TRAILING: 
            hTextPos = (orientationIsLeftToRight) ? RIGHT : LEFT;
            break;
        }

        return layoutCompoundLabel(fm,
                                   text,
                                   icon,
                                   verticalAlignment,
                                   hAlign,
                                   verticalTextPosition,
                                   hTextPos,
                                   viewR,
                                   iconR,
                                   textR,
                                   textIconGap);
!!!172165.java!!!	layoutCompoundLabel(inout fm : FontMetrics, in text : String, inout icon : Icon, in verticalAlignment : int, in horizontalAlignment : int, in verticalTextPosition : int, in horizontalTextPosition : int, inout viewR : Rectangle, inout iconR : Rectangle, inout textR : Rectangle, in textIconGap : int) : String

        /* Initialize the icon bounds rectangle iconR.
         */

        if (icon != null) {
            iconR.width = icon.getIconWidth();
            iconR.height = icon.getIconHeight();
        }
        else {
            iconR.width = iconR.height = 0;
        }

        /* Initialize the text bounds rectangle textR.  If a null
         * or and empty String was specified we substitute "" here
         * and use 0,0,0,0 for textR.
         */

        // Fix for textIsEmpty sent by Paulo Santos
        boolean textIsEmpty = (text == null) || (text.length == 0)
      || (text.length == 1 && ( (text[0]==null) || text[0].equals("") ));

      String rettext = "";
        if (textIsEmpty) {
            textR.width = textR.height = 0;
        }
        else {
          Dimension dim = computeMultiLineDimension( fm, text );
            textR.width = dim.width;
            textR.height = dim.height;
        }

        /* Unless both text and icon are non-null, we effectively ignore
         * the value of textIconGap.  The code that follows uses the
         * value of gap instead of textIconGap.
         */

        int gap = (textIsEmpty || (icon == null)) ? 0 : textIconGap;

        if (!textIsEmpty) {

            /* If the label text string is too wide to fit within the available
             * space "..." and as many characters as will fit will be
             * displayed instead.
             */

            int availTextWidth;

            if (horizontalTextPosition == CENTER) {
                availTextWidth = viewR.width;
            }
            else {
                availTextWidth = viewR.width - (iconR.width + gap);
            }


            if (textR.width > availTextWidth && text.length == 1) {
                String clipString = "...";
                int totalWidth = SwingUtilities.computeStringWidth(fm,clipString);
                int nChars;
                for(nChars = 0; nChars < text[0].length(); nChars++) {
                    totalWidth += fm.charWidth(text[0].charAt(nChars));
                    if (totalWidth > availTextWidth) {
                        break;
                    }
                }
                rettext = text[0].substring(0, nChars) + clipString;
                textR.width = SwingUtilities.computeStringWidth(fm,rettext);
            }
        }


        /* Compute textR.x,y given the verticalTextPosition and
         * horizontalTextPosition properties
         */

        if (verticalTextPosition == TOP) {
            if (horizontalTextPosition != CENTER) {
                textR.y = 0;
            }
            else {
                textR.y = -(textR.height + gap);
            }
        }
        else if (verticalTextPosition == CENTER) {
            textR.y = (iconR.height / 2) - (textR.height / 2);
        }
        else { // (verticalTextPosition == BOTTOM)
            if (horizontalTextPosition != CENTER) {
                textR.y = iconR.height - textR.height;
            }
            else {
                textR.y = (iconR.height + gap);
            }
        }

        if (horizontalTextPosition == LEFT) {
            textR.x = -(textR.width + gap);
        }
        else if (horizontalTextPosition == CENTER) {
            textR.x = (iconR.width / 2) - (textR.width / 2);
        }
        else { // (horizontalTextPosition == RIGHT)
            textR.x = (iconR.width + gap);
        }

        /* labelR is the rectangle that contains iconR and textR.
         * Move it to its proper position given the labelAlignment
         * properties.
         *
         * To avoid actually allocating a Rectangle, Rectangle.union
         * has been inlined below.
         */
        int labelR_x = Math.min(iconR.x, textR.x);
        int labelR_width = Math.max(iconR.x + iconR.width,
                                    textR.x + textR.width) - labelR_x;
        int labelR_y = Math.min(iconR.y, textR.y);
        int labelR_height = Math.max(iconR.y + iconR.height,
                                     textR.y + textR.height) - labelR_y;

        int dx, dy;

        if (verticalAlignment == TOP) {
            dy = viewR.y - labelR_y;
        }
        else if (verticalAlignment == CENTER) {
            dy = (viewR.y + (viewR.height / 2)) - (labelR_y + (labelR_height / 2));
        }
        else { // (verticalAlignment == BOTTOM)
            dy = (viewR.y + viewR.height) - (labelR_y + labelR_height);
        }

        if (horizontalAlignment == LEFT) {
            dx = viewR.x - labelR_x;
        }
        else if (horizontalAlignment == RIGHT) {
            dx = (viewR.x + viewR.width) - (labelR_x + labelR_width);
        }
        else { // (horizontalAlignment == CENTER)
            dx = (viewR.x + (viewR.width / 2)) -
                 (labelR_x + (labelR_width / 2));
        }

        /* Translate textR and glypyR by dx,dy.
         */

        textR.x += dx;
        textR.y += dy;

        iconR.x += dx;
        iconR.y += dy;

        return rettext;
!!!172293.java!!!	paintEnabledText(inout l : JLabel, inout g : Graphics, in s : String, in textX : int, in textY : int) : void

        int accChar = l.getDisplayedMnemonic();
        g.setColor(l.getForeground());
        drawString(g, s, accChar, textX, textY);
!!!172421.java!!!	paintDisabledText(inout l : JLabel, inout g : Graphics, in s : String, in textX : int, in textY : int) : void

    int accChar = l.getDisplayedMnemonic();
    g.setColor(l.getBackground());
      drawString(g, s, accChar, textX, textY);
!!!172549.java!!!	drawString(inout g : Graphics, in s : String, in accChar : int, in textX : int, in textY : int) : void

      if( s.indexOf('\n') == -1 )
      BasicGraphicsUtils.drawString(g, s, accChar, textX, textY);
      else
      {
        String[] strs = splitStringByLines( s );
        int height = g.getFontMetrics().getHeight();
        // Only the first line can have the accel char
        BasicGraphicsUtils.drawString(g, strs[0], accChar, textX, textY);
        for( int i = 1; i < strs.length; i++ )
          g.drawString( strs[i], textX, textY + (height*i) );
      }
!!!172677.java!!!	computeMultiLineDimension(inout fm : FontMetrics, in strs : String) : Dimension

    int i, c, width = 0;
        for(i=0, c=strs.length ; i < c ; i++)
          width = Math.max( width, SwingUtilities.computeStringWidth(fm,strs[i]) );
    return new Dimension( width, fm.getHeight() * strs.length );
!!!172805.java!!!	splitStringByLines(in str : String) : String

    if( str.equals(this.str) )
      return strs;
    
    this.str = str;
    
    int lines = 1;
    int i, c;
        for(i=0, c=str.length() ; i < c ; i++) {
            if( str.charAt(i) == '\n' )
              lines++;
        }
    strs = new String[lines];
    StringTokenizer st = new StringTokenizer( str, "\n" );
    
    int line = 0;
    while( st.hasMoreTokens() )
      strs[line++] = st.nextToken();
      
    return strs;
