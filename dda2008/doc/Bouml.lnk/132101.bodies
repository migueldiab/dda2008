class ServiciosUsuarios
!!!160133.java!!!	login(in usuario : String, in clave : String) : boolean

    Usuario unUsuario = new Usuario(usuario);
    unUsuario = (Usuario) ServiciosUsuarios.obtener(unUsuario);
    if (unUsuario != null) { 
      if (unUsuario.getClave().equals(clave)) {
        usuarioActual = unUsuario;
        return true;
      }
      else {
        return false;
      }
    }
    else {
      return false;
    }      
!!!160261.java!!!	getUsuarioActual() : Usuario

    return usuarioActual;
!!!160389.java!!!	logout() : boolean

    usuarioActual = null;
    return true;
!!!160517.java!!!	agregar(inout unUsuario : Usuario) : boolean

    
    if (usuarios.indexOf(unUsuario)==-1) {
      usuarios.add(unUsuario);
      return true;
    }
    else {
      return false;
    }        
!!!160645.java!!!	borrar(inout unUsuario : Usuario) : boolean

    if (usuarios.indexOf(unUsuario)!=-1) {
      // FIXME : Tiene que ver que no tenga presupuestos y eso...
      if (Fachada.obtenerPresupuestos(unUsuario, 0, 0, 1).size()==0) {
        usuarios.remove(unUsuario);
        return true;
      }
      else {
        return false;
      }
    }
    else {
      return false;
    }      
!!!160773.java!!!	modificar(inout original : Usuario, inout nuevo : Usuario) : boolean

    if ((original == null) || (nuevo == null)) return false;
    int posOriginal = usuarios.indexOf(original);
    if (posOriginal == -1) return false;
    int posNuevo = usuarios.indexOf(nuevo);
    if (posNuevo > -1 && posNuevo != posOriginal) return false;
    
    // No se puede modificar el rol de un usuario gestor que sea dueño de algun presupuesto
    if (!original.getGrupo().equals(nuevo.getGrupo())) {
      ArrayList presupuestos = null;
      presupuestos = ServiciosPresupuestos.obtenerPresupuestoPorUsuario(original);
      if (presupuestos.size() > 0) {
        return false;
      }
    }
    usuarios.set(posOriginal, nuevo);
    return true;
!!!160901.java!!!	cantidad() : int

    
    return usuarios.size();
!!!161029.java!!!	obtener(inout unUsuario : Usuario) : Object

    
    int pos = usuarios.indexOf(unUsuario);
    if (pos!=-1) { 
      return usuarios.get(pos);
    }
    else {
      return null;
    }  
!!!161157.java!!!	listadoGestores() : ArrayList

	if (cantidad() == 0)
	return null;
	else{
		ArrayList gestores=new ArrayList();
		for (int i = 0; i < usuarios.size(); i++) {
		      Usuario unUsuario = (Usuario) usuarios.get(i);
		      if (unUsuario.getGrupo().getNombre().equals("Gestor")) {
		    	  gestores.add(unUsuario);
		      }
		}		
		return gestores;
	}
	
!!!161285.java!!!	listado() : ArrayList

    if (cantidad() == 0)
      return null;
    else
    	
      return usuarios;
!!!161413.java!!!	listadoGestoresPorNombreUsuario() : ArrayList

	if (cantidad() == 0)
		return null;
		else{
			ArrayList gestores=listadoGestores();
		Collections.sort(gestores,(new CriterioComparacionPorNombreUsuarioAsc()));
		return gestores;
		}
!!!161541.java!!!	listadoGestoresPorApellido() : ArrayList

	if (cantidad() == 0)
		return null;
		else{
			ArrayList gestores=listadoGestores();
			Collections.sort(gestores);
			return gestores;
	        }
!!!161669.java!!!	vistaLogin(in id : String, in password : char) : boolean

  String clave = new String(password);
  return login(id, clave);
